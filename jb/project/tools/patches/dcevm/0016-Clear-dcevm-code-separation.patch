From 5504812403a0673c428fc5589cd94f2c3fea7616 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <lada.dvorak7@gmail.com>
Date: Fri, 23 Oct 2020 10:20:26 +0200
Subject: [PATCH 16/17] Clear dcevm code separation

---
 src/hotspot/share/classfile/systemDictionary.cpp   |  4 ++--
 src/hotspot/share/gc/serial/genMarkSweep.cpp       |  8 +++++---
 src/hotspot/share/interpreter/linkResolver.cpp     | 14 ++++++++++----
 .../instrumentation/jfrEventClassTransformer.cpp   |  2 +-
 src/hotspot/share/oops/instanceKlass.cpp           | 10 ++++++----
 src/hotspot/share/oops/method.cpp                  |  2 +-
 src/hotspot/share/prims/jvmtiGetLoadedClasses.cpp  |  2 +-
 src/hotspot/share/runtime/reflection.cpp           |  2 +-
 8 files changed, 27 insertions(+), 17 deletions(-)

diff --git a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
index 791b49c68ad..011a14eab32 100644
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -1152,7 +1152,7 @@ InstanceKlass* SystemDictionary::resolve_from_stream(Symbol* class_name,
     MutexLocker mu(SystemDictionary_lock, THREAD);
 
     Klass* check = find_class(h_name, k->class_loader_data());
-    assert((check == k && !k->is_redefining()) || (k->is_redefining() && check == k->old_version()), "should be present in the dictionary");
+    assert(check == k && !k->is_redefining() || k->is_redefining() && check == k->old_version(), "should be present in the dictionary");
   } );
 
   return k;
@@ -2153,7 +2153,7 @@ void SystemDictionary::check_constraints(unsigned int d_hash,
       // also hold array classes.
 
       assert(check->is_instance_klass(), "noninstance in systemdictionary");
-      if ((defining == true) || ((k != check) && k->old_version() != check)) {
+      if ((defining == true) || (k != check && (!AllowEnhancedClassRedefinition || k->old_version() != check))) {
         throwException = true;
         ss.print("loader %s", loader_data->loader_name_and_id());
         ss.print(" attempted duplicate %s definition for %s. (%s)",
diff --git a/src/hotspot/share/gc/serial/genMarkSweep.cpp b/src/hotspot/share/gc/serial/genMarkSweep.cpp
index b18682f9a12..590b5389b4d 100644
--- a/src/hotspot/share/gc/serial/genMarkSweep.cpp
+++ b/src/hotspot/share/gc/serial/genMarkSweep.cpp
@@ -343,7 +343,9 @@ void GenMarkSweep::mark_sweep_phase4() {
 
   GenCompactClosure blk;
   gch->generation_iterate(&blk, true);
-  DcevmSharedGC::copy_rescued_objects_back(MarkSweep::_rescued_oops, true);
-  DcevmSharedGC::clear_rescued_objects_resource(MarkSweep::_rescued_oops);
-  MarkSweep::_rescued_oops = NULL;
+  if (AllowEnhancedClassRedefinition) {
+    DcevmSharedGC::copy_rescued_objects_back(MarkSweep::_rescued_oops, true);
+    DcevmSharedGC::clear_rescued_objects_resource(MarkSweep::_rescued_oops);
+    MarkSweep::_rescued_oops = NULL;
+  }
 }
diff --git a/src/hotspot/share/interpreter/linkResolver.cpp b/src/hotspot/share/interpreter/linkResolver.cpp
index 9dc184d02f5..bff1c3627b0 100644
--- a/src/hotspot/share/interpreter/linkResolver.cpp
+++ b/src/hotspot/share/interpreter/linkResolver.cpp
@@ -295,8 +295,13 @@ void LinkResolver::check_klass_accessability(Klass* ref_klass, Klass* sel_klass,
       return;  // no relevant check to do
     }
   }
-  Reflection::VerifyClassAccessResults vca_result =
-    Reflection::verify_class_access(ref_klass->newest_version(), InstanceKlass::cast(base_klass->newest_version()), true);
+  Klass* refKlassNewest = ref_klass;
+  Klass* baseKlassNewest = base_klass;
+  if (AllowEnhancedClassRedefinition) {
+    refKlassNewest = ref_klass->newest_version();
+    baseKlassNewest = base_klass->newest_version();
+  }
+  Reflection::VerifyClassAccessResults vca_result = Reflection::verify_class_access(refKlassNewest, InstanceKlass::cast(baseKlassNewest), true);
   if (vca_result != Reflection::ACCESS_OK) {
     ResourceMark rm(THREAD);
     char* msg = Reflection::verify_class_access_msg(ref_klass,
@@ -572,7 +577,8 @@ void LinkResolver::check_method_accessability(Klass* ref_klass,
   // We'll check for the method name first, as that's most likely
   // to be false (so we'll short-circuit out of these tests).
   if (sel_method->name() == vmSymbols::clone_name() &&
-      sel_klass->newest_version() == SystemDictionary::Object_klass()->newest_version() &&
+      ( !AllowEnhancedClassRedefinition && sel_klass == SystemDictionary::Object_klass() ||
+      AllowEnhancedClassRedefinition && sel_klass->newest_version() == SystemDictionary::Object_klass()->newest_version()) &&
       resolved_klass->is_array_klass()) {
     // We need to change "protected" to "public".
     assert(flags.is_protected(), "clone not protected?");
@@ -997,7 +1003,7 @@ void LinkResolver::resolve_field(fieldDescriptor& fd,
       ResourceMark rm(THREAD);
       stringStream ss;
 
-      if (sel_klass != current_klass && sel_klass != current_klass->active_version()) {
+      if (sel_klass != current_klass && (!AllowEnhancedClassRedefinition || sel_klass != current_klass->active_version())) {
         ss.print("Update to %s final field %s.%s attempted from a different class (%s) than the field's declaring class",
                  is_static ? "static" : "non-static", resolved_klass->external_name(), fd.name()->as_C_string(),
                 current_klass->external_name());
diff --git a/src/hotspot/share/jfr/instrumentation/jfrEventClassTransformer.cpp b/src/hotspot/share/jfr/instrumentation/jfrEventClassTransformer.cpp
index 8afe8985026..4e7b39406fa 100644
--- a/src/hotspot/share/jfr/instrumentation/jfrEventClassTransformer.cpp
+++ b/src/hotspot/share/jfr/instrumentation/jfrEventClassTransformer.cpp
@@ -1467,7 +1467,7 @@ static InstanceKlass* create_new_instance_klass(InstanceKlass* ik, ClassFileStre
                              NULL, // host klass
                              NULL, // cp_patches
                              ClassFileParser::INTERNAL, // internal visibility
-							 false,
+                             false,
                              THREAD);
   if (HAS_PENDING_EXCEPTION) {
     log_pending_exception(PENDING_EXCEPTION);
diff --git a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
index 4312c2c4ca9..7335f0cffc9 100644
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -178,7 +178,9 @@ bool InstanceKlass::has_nest_member(InstanceKlass* k, TRAPS) const {
       }
 
       Klass* k2 = _constants->klass_at(cp_index, CHECK_false);
-      k2 = k2->newest_version();
+      if (AllowEnhancedClassRedefinition) {
+        k2 = k2->newest_version();
+      }
       if (k2 == k) {
         log_trace(class, nestmates)("- class is listed as a nest member");
         return true;
@@ -837,7 +839,7 @@ bool InstanceKlass::link_class_impl(bool throw_verifyerror, TRAPS) {
 #endif
       set_init_state(linked);
       // (DCEVM) Must check for old version in order to prevent infinite loops.
-      if (JvmtiExport::should_post_class_prepare() && old_version() == NULL /* JVMTI deadlock otherwise */) {
+      if (JvmtiExport::should_post_class_prepare() && (!AllowEnhancedClassRedefinition || old_version() == NULL) /* JVMTI deadlock otherwise */) {
         Thread *thread = THREAD;
         assert(thread->is_Java_thread(), "thread->is_Java_thread()");
         JvmtiExport::post_class_prepare((JavaThread *) thread, this);
@@ -919,7 +921,7 @@ void InstanceKlass::initialize_impl(TRAPS) {
     // that aren't expected to throw.  This would wreak havoc.  See 6320309.
     // (DCEVM) Wait also for the old class version to be fully initialized.
     while((is_being_initialized() && !is_reentrant_initialization(self))
-        || (old_version() != NULL && InstanceKlass::cast(old_version())->is_being_initialized())) {
+        || (AllowEnhancedClassRedefinition && old_version() != NULL && InstanceKlass::cast(old_version())->is_being_initialized())) {
         wait = true;
       ol.waitUninterruptibly(CHECK);
     }
@@ -3617,7 +3619,7 @@ void InstanceKlass::verify_on(outputStream* st) {
 
     guarantee(sib->is_klass(), "should be klass");
     // TODO: (DCEVM) explain
-    guarantee(sib->super() == super || super->newest_version() == SystemDictionary::Object_klass(), "siblings should have same superklass");
+    guarantee(sib->super() == super || AllowEnhancedClassRedefinition && super->newest_version() == SystemDictionary::Object_klass(), "siblings should have same superklass");
   }
 
   // Verify implementor fields requires the Compile_lock, but this is sometimes
diff --git a/src/hotspot/share/oops/method.cpp b/src/hotspot/share/oops/method.cpp
index a9556ecf0c4..6c7edaca67e 100644
--- a/src/hotspot/share/oops/method.cpp
+++ b/src/hotspot/share/oops/method.cpp
@@ -2100,7 +2100,7 @@ void Method::ensure_jmethod_ids(ClassLoaderData* loader_data, int capacity) {
 // Add a method id to the jmethod_ids
 jmethodID Method::make_jmethod_id(ClassLoaderData* loader_data, Method* m) {
   // FIXME: (DCEVM) ???
-  if (m != m->newest_version()) {
+  if (AllowEnhancedClassRedefinition && m != m->newest_version()) {
     m = m->newest_version();
   }
   ClassLoaderData* cld = loader_data;
diff --git a/src/hotspot/share/prims/jvmtiGetLoadedClasses.cpp b/src/hotspot/share/prims/jvmtiGetLoadedClasses.cpp
index 60604c645ff..325bffb7ad0 100644
--- a/src/hotspot/share/prims/jvmtiGetLoadedClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiGetLoadedClasses.cpp
@@ -51,7 +51,7 @@ public:
     //         the new version (SystemDictionary stores only new versions). But the LoadedClassesClosure's functionality was
     //         changed in java8  where jvmtiLoadedClasses collects all classes from all classloaders, therefore we
     //         must use new versions only.
-    if (k->new_version()==NULL) {
+    if (AllowEnhancedClassRedefinition && k->new_version()==NULL) {
       _classStack.push((jclass) _env->jni_reference(Handle(_cur_thread, k->java_mirror())));
     }
   }
diff --git a/src/hotspot/share/runtime/reflection.cpp b/src/hotspot/share/runtime/reflection.cpp
index ed789b0bc2b..06f60855655 100644
--- a/src/hotspot/share/runtime/reflection.cpp
+++ b/src/hotspot/share/runtime/reflection.cpp
@@ -660,7 +660,7 @@ bool Reflection::verify_member_access(const Klass* current_class,
                                       TRAPS) {
 
   // (DCEVM) Decide accessibility based on active version
-  if (current_class != NULL) {
+  if (AllowEnhancedClassRedefinition && current_class != NULL) {
     current_class = current_class->active_version();
   }
 
-- 
2.23.0

